# Queries ES for products that have not been agg tagged.

input {
  elasticsearch {
    hosts => ["$ELASTIC_URL"]
    user => "${ELASTIC_USER}"
    password => "${ELASTIC_PWD}"
    index => "${INDEX}"
    size => 20 
    scroll => "1m"
    docinfo => true
    id => 'get_new_products'
    query => '{
      "sort": [
        "_doc"
        ],
      "_source": {
          "includes": [ "variants.title", "store_id" ],
          "excludes": [ "_source" ]
      },
      "query": {
          "bool": {
              "must_not": {
                  "exists": {"field": "categories_version"}
              }
            }
          }          
    }'
  }
}

# Uses a search template to aggregate categories from a sample of similar documents.
# Only adds categories if documents counts are greater than 0.50 of total docs. 
# NOTE: There is a hard dependency on 10 shards in parent-1 index. If shards increase this logic will need to be updated.

filter {
  if [variants][0][title] {
    mutate {
       gsub => [ "[variants][0][title]", "[^A-Za-z0-9.,:;/()]", " " ]
        id => "make_alphanumeric_titles"
        }
  elasticsearch {
      hosts => ["$ELASTIC_URL"]
      user => "${ELASTIC_USER}"
      password => "${ELASTIC_PWD}"
      index => "parent-1"
      query_template => "agg-tags-template.json"
      aggregation_fields => { "sample" => "sample" }
      docinfo_fields => {
          "_id" => "%{[@metadata][_id]}"
          "_index" => "%{[@metadata][_index]}"
          "store_id" => "%{[_source][store_id]}"
          }
      id => "aggregate_categories"
        }
      }
      
  else {
  ruby { code => "event.set('categories', nil)"
  id => "title_missing"
    }
  }
 
  if [sample][top_categories][buckets][0][doc_count] and [sample][top_categories][buckets][0][doc_count] > 25 {
    mutate {
          add_field => {
            "categories" => "%{[sample][top_categories][buckets][0][key]}"
            }
          id => "make_categories" 
          }
    if [sample][top_categories][buckets][1][doc_count] and [sample][top_categories][buckets][1][doc_count] > 25 {
      mutate {
        add_field => {
          "categories" => "%{[sample][top_categories][buckets][1][key]}"
          }
        }
      if [sample][top_categories][buckets][2][doc_count] and [sample][top_categories][buckets][2][doc_count] > 25 {
        mutate {
          add_field => {
            "categories" => "%{[sample][top_categories][buckets][2][key]}"
          }
        }
        if [sample][top_categories][buckets][3][doc_count] and [sample][top_categories][buckets][3][doc_count] > 25 {
          mutate {
            add_field => {
              "categories" => "%{[sample][top_categories][buckets][3][key]}"
            }
          }
          if [sample][top_categories][buckets][4][doc_count] and [sample][top_categories][buckets][4][doc_count] > 25 {
            mutate {
              add_field => {
                "categories" => "%{[sample][top_categories][buckets][4][key]}"
              }
            }
            if [sample][top_categories][buckets][5][doc_count] and [sample][top_categories][buckets][5][doc_count] > 25 {
              mutate {
                add_field => {
                  "categories" => "%{[sample][top_categories][buckets][5][key]}"
                }
              }
              if [sample][top_categories][buckets][6][doc_count] and [sample][top_categories][buckets][6][doc_count] > 25 {
                mutate {
                  add_field => {
                    "categories" => "%{[sample][top_categories][buckets][6][key]}"
                  }
                }
                if [sample][top_categories][buckets][7][doc_count] and [sample][top_categories][buckets][7][doc_count] > 25 {
                  mutate {
                    add_field => {
                      "categories" => "%{[sample][top_categories][buckets][7][key]}"
                    }
                  }
                  if [sample][top_categories][buckets][8][doc_count] and [sample][top_categories][buckets][8][doc_count] > 25 {
                    mutate {
                      add_field => {
                        "categories" => "%{[sample][top_categories][buckets][8][key]}"
                      }
                    }
                    if [sample][top_categories][buckets][9][doc_count] and [sample][top_categories][buckets][9][doc_count] > 25 {
                      mutate {
                        add_field => {
                          "categories" => "%{[sample][top_categories][buckets][9][key]}"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }  

  else {
    ruby { code => "event.set('categories', nil)"
    id => "insufficient_matching_docs"
      }
    }

mutate {
  add_field => {
    "parent_id" => "%{[@metadata][_id]}"
    "categories_version" => 1
  }
}

 prune {
     whitelist_names => [ "^@timestamp$"
                          , "^categories_version$"
                          , "^categories$"
                          , "^store_id$"
                          , "^parent_id$"
                          ]
   }
}

# Updates ES document with new categories field, hash_key, and model
# Creates file with output
output {
  elasticsearch {
    hosts => ["$ELASTIC_URL"]
    user => "${ELASTIC_USER}"
    password => "${ELASTIC_PWD}"    
    action => update
    document_id => "%{[@metadata][_id]}"
    index => "%{[@metadata][_index]}"
    id => 'update_es'
    }
  
#  stdout { codec => rubydebug } # For local testing, remove in prod

  file {
     path => '/usr/share/logstash/categories/%{+yyyy-MM-dd-HH:mm}.json'
     id => "write_file"
    }
}
